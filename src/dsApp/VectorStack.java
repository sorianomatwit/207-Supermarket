package dsApp;import java.util.EmptyStackException;import java.util.Vector;/** *   A class of stacks whose entries are stored in a vector. */public class VectorStack<T> implements StackInterface<T>{    private Vector<T> stack;   // Last element is the top entry in stack    private boolean initialized = false;	private static final int DEFAULT_CAPACITY = 50;	private static final int MAX_CAPACITY = 10000;      public VectorStack()    {       this(DEFAULT_CAPACITY);    } // end default constructor      public VectorStack(int initialCapacity)    {       checkCapacity(initialCapacity);       stack = new Vector<T>(initialCapacity); // Size doubles as needed       initialized = true;    } // end constructor      /**      * Throws an exception if this object is not initialized.     */    private void checkInitialization()    {       if (!initialized)             throw new SecurityException("ArrayBag object is not initialized properly.");    }        // Throws an exception if the client requests a capacity that is too large.    private void checkCapacity(int capacity)    {       if (capacity > MAX_CAPACITY)          throw new IllegalStateException("Attempt to create a bag whose " +                                          "capacity exeeds allowed " +                                          "maximum of " + MAX_CAPACITY);    } // end checkCapacity        public void push(T newEntry)    {       checkInitialization();       stack.add(newEntry);    } // end push    public T pop()    {       checkInitialization();       if (isEmpty())          throw new EmptyStackException();       else          return stack.remove(stack.size() - 1);    } // end pop	public T peek()	{	   checkInitialization();	   if (isEmpty())	      throw new EmptyStackException();	   else	      return stack.lastElement();	} // end peek	public boolean isEmpty()	{	   return stack.isEmpty();	} // end isEmpty	public void clear()	{	   stack.clear();	} // end clear	} // end VectorStack